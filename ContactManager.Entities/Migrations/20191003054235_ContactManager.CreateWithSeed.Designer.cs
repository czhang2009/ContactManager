// <auto-generated />
using ContactManager.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactManager.Entities.Migrations
{
    [DbContext(typeof(ContactManagerContext))]
    [Migration("20191003054235_ContactManager.CreateWithSeed")]
    partial class ContactManagerCreateWithSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactManager.Entities.Models.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Charles",
                            LastName = "Zhang"
                        },
                        new
                        {
                            Id = 2L,
                            FirstName = "Tom",
                            LastName = "Zhang"
                        });
                });

            modelBuilder.Entity("ContactManager.Entities.Models.EmailAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired();

                    b.Property<long>("ContactId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.ToTable("EmailAddresses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Address = "czhang@personal.com",
                            ContactId = 1L,
                            Type = 1
                        },
                        new
                        {
                            Id = 2L,
                            Address = "czhang@business.com",
                            ContactId = 1L,
                            Type = 0
                        },
                        new
                        {
                            Id = 3L,
                            Address = "tzhang@personal.com",
                            ContactId = 2L,
                            Type = 1
                        },
                        new
                        {
                            Id = 4L,
                            Address = "tzhang@business.com",
                            ContactId = 2L,
                            Type = 0
                        });
                });

            modelBuilder.Entity("ContactManager.Entities.Models.EmailAddress", b =>
                {
                    b.HasOne("ContactManager.Entities.Models.Contact")
                        .WithMany("EmailAddresses")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
